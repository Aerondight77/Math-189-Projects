lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
#### *(b) Plot glucose versus BMI and color the points by their true diabetes class (Y/N) for the test set.*
```{r}
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
#### *(c) Add the LDA decision boundary for the model fit in (a).*
```{r}
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-19)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-20)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-21)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-30)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-40)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-50)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-100)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-150)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-200)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-1000)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-10000)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-100000)%*%(mu1hat-mu2hat))
Diabetic <- test_set$response == 1
NonDiabetic <- test_set$response == 0
Diabetic.df <- test_set[Diabetic, ]
NonDiabetic.df <- test_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-19)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
#Plotting
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes)) +
geom_abline(intercept=b0,slope=b1)
set.seed(3)
train = sample(768, 768*.8)
train_set <- pimaData[-train, ]
test_set <- pimaData[train, ]
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
### Part B
*Plot glucose versus BMI and color the points by their true diabetes class (Y/N) for the test set.*
```{r}
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-19)%*%(mu1hat-mu2hat))
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-19)%*%(mu1hat-mu2hat))
#Plotting
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes)) +
geom_abline(intercept=b0,slope=b1)
library(mlbench)
library(ggplot2)
library(dplyr)
data("PimaIndiansDiabetes") #loads data under "name"
pimaData <- PimaIndiansDiabetes
#create new numeric col of all 1s
pimaData$response <- 1
#crate response col, transform string to categorical
pimaData$response[pimaData$diabetes == 'neg'] <- 0
#bmi > 35 col
pimaData$bmi <- 0
pimaData$bmi[pimaData$mass > 35] <- 1
logRegMulti <- glm(response~glucose + bmi, data=pimaData, family="binomial")
summary(logRegMulti)
#Glucose for Low BMI
#       vector of 1s for intercept    vector of random glucose levels btw max and min        all bmi's > 35
BMILow <- cbind(rep(1,10000), seq(from=min(pimaData$glucose),to=max(pimaData$glucose),length.out=1000), rep(0, 10000))
lowPredxb <- BMILow%*%coef(logRegMulti)
lowPreds <-  1/(1+exp(-lowPredxb))
lowPredDF <- data.frame(x=BMILow[,2], preds=lowPreds)
#Glucose for High BMI
BMIHigh <- cbind(rep(1,10000), seq(from=min(pimaData$glucose),to=max(pimaData$glucose),length.out=1000), rep(1, 10000))
highPredxb <- BMIHigh%*%coef(logRegMulti)
highPreds <-  1/(1+exp(-highPredxb))
highPredDF <- data.frame(x=BMIHigh[,2], preds=highPreds)
ggplot() +
geom_point(data=pimaData,aes(y=response, x=glucose)) +
geom_line(data=lowPredDF,aes(x=x,y=lowPreds),color="Blue") +
geom_line(data=highPredDF,aes(x=x,y=highPreds),color="Red") +
labs(y="Probability of having Diabetes", x="Glucose")
#CI Low BMI
lowSexb <- sqrt(diag(BMILow%*%vcov(logRegMulti)%*%t(BMILow)))
lowCixb <- cbind(lowPredxb-1.96*lowSexb,lowPredxb+1.96*lowSexb)
ciLow <- 1/(1+exp(-lowCixb))
lowPredDF <- lowPredDF %>% mutate(lb=ciLow[,1],ub=ciLow[,2])
#CI High BMI
highSexb <- sqrt(diag(BMIHigh%*%vcov(logRegMulti)%*%t(BMIHigh)))
highCixb <- cbind(highPredxb-1.96*highSexb,highPredxb+1.96*highSexb)
ciHigh <- 1/(1+exp(-highCixb))
highPredDF <- highPredDF %>% mutate(lb=ciHigh[,1],ub=ciHigh[,2])
ggplot() +
geom_point(data=pimaData,aes(y=response, x=glucose)) +
geom_line(data=lowPredDF,aes(x=x,y=lowPreds, color="BMI < 35")) +
geom_ribbon(data=lowPredDF,aes(x=x,ymin=lb,ymax=ub),alpha=0.3,fill="Red") +
geom_line(data=highPredDF,aes(x=x,y=highPreds, color="BMI > 35")) +
geom_ribbon(data=highPredDF,aes(x=x,ymin=lb,ymax=ub),alpha=0.3,fill="Blue") +
labs(y="Probability of having Diabetes", x="Glucose")
library(MASS)
set.seed(3)
train = sample(768, 768*.8)
train_set <- pimaData[train, ]
test_set <- pimaData[-train, ]
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-19)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
#Plotting
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes)) +
geom_abline(intercept=b0,slope=b1)
lda_pred <- predict(lda_fit, newdata = test_set)
temp_table <- table(lda_pred$class, test_set$response)
temp_table
#Calculating accuracy
mean(lda_pred$class == test_set$response)
qda_fit <- qda(response ~ glucose + mass, data = pimaData,
subset = train)
qda_fit
# OLD CODE
#temp_table <- table(Wage$hi,round(predict(logReg,type='response')))
#temp_table
# NEW CODE
qda_pred <- predict(qda_fit, newdata = test_set)
temp_table2 <- table(qda_pred$class, test_set$response)
temp_table2
mean(qda_pred$class == test_set$response)
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat)%*%(mu1hat-mu2hat))
, tol = 1e-19
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat)%*%(mu1hat-mu2hat)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat)%*%(mu1hat-mu2hat))
#Plotting
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes)) +
geom_abline(intercept=b0,slope=b1)
lda_pred <- predict(lda_fit, newdata = test_set)
temp_table <- table(lda_pred$class, test_set$response)
temp_table
#Calculating accuracy
mean(lda_pred$class == test_set$response)
qda_fit <- qda(response ~ glucose + mass, data = pimaData,
subset = train)
qda_fit
# NEW CODE
qda_pred <- predict(qda_fit, newdata = test_set)
temp_table2 <- table(qda_pred$class, test_set$response)
temp_table2
mean(qda_pred$class == test_set$response)
Sigmahat
PimaIndiansDiabetes
dim(pimaData)
library(MASS)
set.seed(4)
train = sample(768, 768*.8)
train_set <- pimaData[train, ]
test_set <- pimaData[-train, ]
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat)%*%(mu1hat-mu2hat))
head(x1)
class(x1)
dim(x1)
x1
mu1hat
diabetic.gluc.mean
diabetic.mass.mean
names(Diabetic.df)
View(pimaData)
View(pimaData)
Diabetic.df <- train_set[Diabetic, ]
View(Diabetic.df)
View(Diabetic.df)
x1 <- Diabetic.df[c("glucose","mass")]
x1 <- Diabetic.df[,c("glucose","mass")]
x1 <- as.matrix(Diabetic.df[,c("glucose","mass")])
x2 <- as.matrix(NonDiabetic.df[,c("glucose","mass")])
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
#Plotting
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes)) +
geom_abline(intercept=b0,slope=b1)
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
x1 <- as.matrix(Diabetic.df[,c("glucose","mass")])
x2 <- as.matrix(NonDiabetic.df[,c("glucose","mass")])
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
#Plotting
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes)) +
geom_abline(intercept=b0,slope=b1)
library(ISLR2)
library(MASS)
data =Bikeshare
data
View(data)
View(data)
library(ISLR2)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
library(ISLR2)
library(MASS)
data =Bikeshare
data
View(data)
View(data)
class(data())
