Diabetic <- test_set$response == 1
library(mlbench)
library(ggplot2)
library(dplyr)
data("PimaIndiansDiabetes") #loads data under "name"
pimaData <- PimaIndiansDiabetes
#create new numeric col of all 1s
pimaData$response <- 1
#crate response col, transform string to categorical
pimaData$response[pimaData$diabetes == 'neg'] <- 0
#bmi > 35 col
pimaData$bmi <- 0
pimaData$bmi[pimaData$mass > 35] <- 1
logRegMulti <- glm(response~glucose + bmi, data=pimaData, family="binomial")
summary(logRegMulti)
#Glucose for Low BMI
#       vector of 1s for intercept    vector of random glucose levels btw max and min        all bmi's > 35
BMILow <- cbind(rep(1,10000), seq(from=min(pimaData$glucose),to=max(pimaData$glucose),length.out=1000), rep(0, 10000))
lowPredxb <- BMILow%*%coef(logRegMulti)
lowPreds <-  1/(1+exp(-lowPredxb))
lowPredDF <- data.frame(x=BMILow[,2], preds=lowPreds)
#Glucose for High BMI
BMIHigh <- cbind(rep(1,10000), seq(from=min(pimaData$glucose),to=max(pimaData$glucose),length.out=1000), rep(1, 10000))
highPredxb <- BMIHigh%*%coef(logRegMulti)
highPreds <-  1/(1+exp(-highPredxb))
highPredDF <- data.frame(x=BMIHigh[,2], preds=highPreds)
ggplot() +
geom_point(data=pimaData,aes(y=response, x=glucose)) +
geom_line(data=lowPredDF,aes(x=x,y=lowPreds),color="Blue") +
geom_line(data=highPredDF,aes(x=x,y=highPreds),color="Red") +
labs(y="Probability of having Diabetes", x="Glucose")
#CI Low BMI
lowSexb <- sqrt(diag(BMILow%*%vcov(logRegMulti)%*%t(BMILow)))
lowCixb <- cbind(lowPredxb-1.96*lowSexb,lowPredxb+1.96*lowSexb)
ciLow <- 1/(1+exp(-lowCixb))
lowPredDF <- lowPredDF %>% mutate(lb=ciLow[,1],ub=ciLow[,2])
#CI High BMI
highSexb <- sqrt(diag(BMIHigh%*%vcov(logRegMulti)%*%t(BMIHigh)))
highCixb <- cbind(highPredxb-1.96*highSexb,highPredxb+1.96*highSexb)
ciHigh <- 1/(1+exp(-highCixb))
highPredDF <- highPredDF %>% mutate(lb=ciHigh[,1],ub=ciHigh[,2])
ggplot() +
geom_point(data=pimaData,aes(y=response, x=glucose)) +
geom_line(data=lowPredDF,aes(x=x,y=lowPreds, color="BMI < 35")) +
geom_ribbon(data=lowPredDF,aes(x=x,ymin=lb,ymax=ub),alpha=0.3,fill="Red") +
geom_line(data=highPredDF,aes(x=x,y=highPreds, color="BMI > 35")) +
geom_ribbon(data=highPredDF,aes(x=x,ymin=lb,ymax=ub),alpha=0.3,fill="Blue") +
labs(y="Probability of having Diabetes", x="Glucose")
library(MASS)
set.seed(1)
train = sample(768, 768*.8)
train_set <- pimaData[train, ]
test_set <- pimaData[-train, ]
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
Diabetic <- test_set$response == 1
NonDiabetic <- test_set$response == 0
Diabetic.df <- test_set[Diabetic, ]
NonDiabetic.df <- test_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
lda_pred <- predict(lda_fit, newdata = test_set)
temp_table <- table(lda_pred$class, test_set$response)
temp_table
#Calculating accuracy
mean(lda_pred$class == test_set$response)
qda_fit <- qda(response ~ glucose + mass, data = pimaData,
subset = train)
qda_fit
# OLD CODE
#temp_table <- table(Wage$hi,round(predict(logReg,type='response')))
#temp_table
# NEW CODE
qda_pred <- predict(qda_fit, newdata = test_set)
temp_table2 <- table(qda_pred$class, test_set$response)
temp_table2
mean(qda_pred$class == test_set$response)
(c) Add the LDA decision boundary for the model fit in (a).*
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
#### *(d) Print the 2x2 confusion matrix of the predictions on the test set versus their true values. Comment on the performance of LDA for predicting diabetes using glucose and BMI.*
```{r}
#Calculating accuracy
mean(lda_pred$class == test_set$response)
#Calculating accuracy
mean(lda_pred$class == test_set$response)
lda_pred <- predict(lda_fit, newdata = test_set)
temp_table <- table(lda_pred$class, test_set$response)
temp_table
#Calculating accuracy
mean(lda_pred$class == test_set$response)
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
#### *(d) Print the 2x2 confusion matrix of the predictions on the test set versus their true values. Comment on the performance of LDA for predicting diabetes using glucose and BMI.*
```{r}
lda_pred <- predict(lda_fit, newdata = test_set)
temp_table <- table(lda_pred$class, test_set$response)
temp_table
#Calculating accuracy
mean(lda_pred$class == test_set$response)
#Calculating accuracy
mean(lda_pred$class == test_set$response)
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
mu1hat
mu2hat
Sigmahat
solve(Sigmahat, tol = 1e-18)
t(mu1hat+mu2hat)
solve(Sigmahat)
det(Sigmahat)
Diabetic <- test_set$response == 1
NonDiabetic <- test_set$response == 0
Diabetic.df <- test_set[Diabetic, ]
NonDiabetic.df <- test_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
pimaData
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
set.seed(2)
train = sample(768, 768*.8)
train_set <- pimaData[train, ]
test_set <- pimaData[-train, ]
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
Diabetic <- train_set$response == 1
NonDiabetic <- train_set$response == 0
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
View(pimaData)
View(pimaData)
View(x1)
View(x1)
View(x2)
View(x2)
set.seed(3)
train = sample(768, 768*.8)
train_set <- pimaData[train, ]
test_set <- pimaData[-train, ]
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
#### *(b) Plot glucose versus BMI and color the points by their true diabetes class (Y/N) for the test set.*
```{r}
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes))
#### *(c) Add the LDA decision boundary for the model fit in (a).*
```{r}
Diabetic.df <- train_set[Diabetic, ]
NonDiabetic.df <- train_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-19)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-20)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-21)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-30)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-40)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-50)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-100)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-150)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-200)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-1000)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-10000)%*%(mu1hat-mu2hat))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-100000)%*%(mu1hat-mu2hat))
Diabetic <- test_set$response == 1
NonDiabetic <- test_set$response == 0
Diabetic.df <- test_set[Diabetic, ]
NonDiabetic.df <- test_set[NonDiabetic, ]
diabetic.gluc.mean <- mean(Diabetic.df$glucose)
diabetic.mass.mean <- mean(Diabetic.df$mass)
nondiabetic.gluc.mean <- mean(NonDiabetic.df$glucose)
nondiabetic.mass.mean <- mean(NonDiabetic.df$mass)
x1 <- cbind(diabetic.gluc.mean,diabetic.mass.mean)
x2 <- cbind(nondiabetic.gluc.mean,nondiabetic.mass.mean)
pi1 = 0.6465798
pi2 = 0.3534202
mu1hat <- colMeans(x1)
mu2hat <- colMeans(x2)
Sigmahat <- cov(rbind(x1,x2))
intercept <- c(log(pi1/pi2) - 0.5*t(mu1hat+mu2hat)%*%solve(Sigmahat, tol = 1e-19)%*%(mu1hat-mu2hat))
slope <- solve(Sigmahat, tol = 1e-18)%*%(mu1hat-mu2hat)
b0 <- intercept/(-slope[2])
b1 <- slope[1]/(-slope[2])
#Plotting
ggplot(test_set, aes(x=glucose,y=mass)) + geom_point(aes(color = diabetes)) +
geom_abline(intercept=b0,slope=b1)
set.seed(3)
train = sample(768, 768*.8)
train_set <- pimaData[-train, ]
test_set <- pimaData[train, ]
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
lda_fit <- lda(response ~ glucose + mass, data = pimaData,
subset = train)
lda_fit
### Part B
*Plot glucose versus BMI and color the points by their true diabetes class (Y/N) for the test set.*
```{r}
